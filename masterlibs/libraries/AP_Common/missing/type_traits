#pragma once

#if !defined(HAVE_TYPE_TRAITS_H) || HAVE_TYPE_TRAITS_H
#include_next <type_traits>
#endif

#if defined(HAVE_STD_REMOVE_REFERENCE) && !HAVE_STD_REMOVE_REFERENCE

namespace std {
    template<class T> struct remove_reference      { typedef T type; };
    template<class T> struct remove_reference<T&>  { typedef T type; };
    template<class T> struct remove_reference<T&&> { typedef T type; };

#if defined(SHAL_CORE_APM2)
    template <class T> struct is_floating_point;
    template <class... Types> struct common_type;
    template<class T> struct is_integral { enum { value = false };};
    template<bool Cond, class T = void> struct enable_if {};
    template<class T> struct enable_if<true, T> { typedef T type; };

    template <class T> class numeric_limits {
    public:
      static const bool is_specialized = false;
      static T min() throw();
      static T max() throw();
      static const int  digits = 0;
      static const int  digits10 = 0;
      static const bool is_signed = false;
      static const bool is_integer = false;
      static const bool is_exact = false;
      static const int radix = 0;
      static T epsilon() throw();
      static T round_error() throw();
      static const int  min_exponent = 0;
      static const int  min_exponent10 = 0;
      static const int  max_exponent = 0;
      static const int  max_exponent10 = 0;
      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const bool has_denorm_loss = false;
      static T infinity() throw();
      static T quiet_NaN() throw();
      static T signaling_NaN() throw();
      static T denorm_min() throw();
      static const bool is_iec559 = false;
      static const bool is_bounded = false;
      static const bool is_modulo = false;
      static const bool traps = false;
      static const bool tinyness_before = false;
    };
#endif
}

#endif
